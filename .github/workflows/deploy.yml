name: Flutter Web CI/CD

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Проверка кода (Checkout)
        uses: actions/checkout@v4

      # --- ФРОНТЕНД: СБОРКА Flutter Web ---
      - name: 2. Настройка Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'beta'

      - name: 3. Получение зависимостей (Фронтенд)
        run: flutter pub get
        working-directory: ./voxly_frontend

      - name: 4. Сборка Flutter Web
        run: flutter build web --release
        working-directory: ./voxly_frontend
          
      # --- ШАГ 5: ДЕПЛОЙ ФРОНТЕНДА (Публикация в GH-PAGES) ---
      - name: 5. Публикация веб-сборки в ветку gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Содержимое папки flutter_frontend/build/web будет помещено в корень gh-pages
          publish_dir: ./voxly_frontend/build/web 
          publish_branch: gh-pages
          commit_message: "Deploying Flutter Web build via CI/CD"
          
      # --- БЭКЕНД: ШАГ 6. КОПИРОВАНИЕ ФАЙЛОВ НА VPS через SCP ---
      - name: 6. Копирование файлов БЭКЕНДА на VPS (/root/voxly-backend)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Копируем содержимое папки voxly_backend, исключая саму папку
          source: "./voxly_backend/*"
          # Целевая папка на VPS
          target: "/root/voxly-backend"
          # Рекурсивное копирование с синхронизацией
          overwrite: true
          
      # --- ШАГ 7: ДЕПЛОЙ ФРОНТЕНДА и БЭКЕНДА (SSH команды) ---
      - name: 7. Развертывание и перезапуск на VPS (Фронтенд + Бэкенд)
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          # Команда, которая выполняется на вашем VPS
          script: |
            # =========================================================
            # ЧАСТЬ 1: Развертывание ФРОНТЕНДА (Скачивание из gh-pages)
            # =========================================================
            REPO_NAME="${{ github.repository }}"
            DEPLOY_TARGET_FRONTEND="/var/www/voxly_frontend"
            TEMP_ARCHIVE="/tmp/gh-pages-build.zip"
            TEMP_DIR="/tmp/gh-pages-content"
            DOWNLOAD_URL="https://api.github.com/repos/$REPO_NAME/zipball/gh-pages"

            echo "Скачивание и развертывание ФРОНТЕНДА..."

            # 1. Скачиваем ZIP-архив ветки gh-pages
            wget -q -O "$TEMP_ARCHIVE" "$DOWNLOAD_URL"
            
            # 2. Распаковываем архив во временную папку
            mkdir -p "$TEMP_DIR"
            unzip -q -o "$TEMP_ARCHIVE" -d "$TEMP_DIR"
            
            # 3. Находим корневую папку с файлами внутри архива
            BUILD_FOLDER=$(find "$TEMP_DIR" -mindepth 1 -maxdepth 1 -type d | head -n 1)
            
            # 4. Очищаем целевую папку фронтенда и создаем ее, если нет
            mkdir -p "$DEPLOY_TARGET_FRONTEND"
            find "$DEPLOY_TARGET_FRONTEND" -mindepth 1 -delete
            
            # 5. Копируем файлы фронтенда
            cp -r "$BUILD_FOLDER"/* "$DEPLOY_TARGET_FRONTEND"/

            # 6. Уборка
            rm -rf "$TEMP_DIR" "$TEMP_ARCHIVE"

            # 7. Перезапускаем HTTP-сервер фронтенда
            echo "Перезапуск voxly-frontend..."
            pm2 reload voxly-frontend || pm2 start http-server --name "voxly-frontend" -- "$DEPLOY_TARGET_FRONTEND" -p 8080
            
            # =========================================================
            # ЧАСТЬ 2: Развертывание БЭКЕНДА (Установка и перезапуск)
            # =========================================================
            BACKEND_TARGET_DIR="/root/voxly-backend"
            
            echo "Развертывание БЭКЕНДА в $BACKEND_TARGET_DIR..."

            # 8. Переходим в папку бэкенда
            cd "$BACKEND_TARGET_DIR" || { echo "ОШИБКА: Не удалось перейти в $BACKEND_TARGET_DIR. Проверьте путь и права."; exit 1; }

            # 9. Установка зависимостей Node.js
            echo "Установка зависимостей Node.js..."
            npm install

            # 10. Перезапускаем PM2-процесс бэкенда с передачей переменных окружения
            # ВАЖНО: Все секреты должны быть добавлены в настройки GitHub Secrets
            echo "Перезапуск voxly-backend с ENV..."
            
            # Строка передачи ENV-переменных PM2
            ENV_ARGS="--env PORT=${{ secrets.PORT }} \
              --env REDIS_URL=${{ secrets.REDIS_URL }} \
              --env OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }} \
              --env LIVEKIT_URL=${{ secrets.LIVEKIT_URL }} \
              --env LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }} \
              --env LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}"
              
            # Команда PM2, которая использует ENV_ARGS
            pm2 reload voxly-backend $ENV_ARGS || { echo "ОШИБКА: Не удалось перезапустить PM2 процесс 'voxly-backend'."; }
            
            # 11. Сохраняем состояние PM2
            echo "Сохранение состояния PM2..."
            pm2 save
