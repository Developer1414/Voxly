name: Flutter Web CI/CD

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Проверка кода (Checkout)
        uses: actions/checkout@v4
        # ВАЖНО: При checkout вся структура репозитория скачивается в папку runner'а.
        # Теперь папка 'voxly_backend' доступна для SCP.

      - name: 2. Настройка Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'beta'

      - name: 3. Получение зависимостей (Фронтенд)
        run: flutter pub get
        working-directory: ./voxly_frontend

      - name: 4. Сборка Flutter Web
        run: flutter build web --release
        working-directory: ./voxly_frontend
          
      # --- ШАГ 5: ПУБЛИКАЦИЯ В ВЕТКУ GH-PAGES (Фронтенд) ---
      - name: 5. Публикация веб-сборки в ветку gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./voxly_frontend/build/web 
          publish_branch: gh-pages
          commit_message: "Deploying Flutter Web build via CI/CD"
          
      # --- ШАГ 6 (НОВЫЙ): КОПИРОВАНИЕ БЭКЕНДА через SCP ---
      - name: 6. Копирование файлов бэкенда на VPS (SCP)
        uses: appleboy/scp-action@v0.1.7 # Используем отдельный экшен для копирования
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Source - откуда копировать на раннере (папка бэкенда)
          source: "./voxly_backend/*"
          # Target - куда копировать на VPS (корень бэкенда)
          target: "/root/voxly-backend"
          # Создаем целевую папку, если ее нет
          strip_components: 1 # Убираем корневую папку voxly_backend, копируем только содержимое
          
      # --- ШАГ 7 (ОБНОВЛЕННЫЙ): РАЗВЕРТЫВАНИЕ И ПЕРЕЗАПУСК (Фронтенд + Бэкенд) ---
      - name: 7. Завершение развертывания на VPS (SSH)
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          script: |
            # =========================================================
            # ЧАСТЬ 1: Развертывание ФРОНТЕНДА (Скачивание из gh-pages)
            # Мы оставили эту часть тут, так как она не зависит от локальных файлов
            # =========================================================
            
            REPO_NAME="${{ github.repository }}"
            DEPLOY_TARGET_FRONTEND="/var/www/voxly_frontend"
            TEMP_ARCHIVE="/tmp/gh-pages-build.zip"
            TEMP_DIR="/tmp/gh-pages-content"
            DOWNLOAD_URL="https://api.github.com/repos/$REPO_NAME/zipball/gh-pages"

            echo "Скачивание и развертывание ФРОНТЕНДА..."

            wget -q -O "$TEMP_ARCHIVE" "$DOWNLOAD_URL"
            mkdir -p "$TEMP_DIR"
            unzip -q -o "$TEMP_ARCHIVE" -d "$TEMP_DIR"
            BUILD_FOLDER=$(find "$TEMP_DIR" -mindepth 1 -maxdepth 1 -type d | head -n 1)
            mkdir -p "$DEPLOY_TARGET_FRONTEND"
            find "$DEPLOY_TARGET_FRONTEND" -mindepth 1 -delete
            cp -r "$BUILD_FOLDER"/* "$DEPLOY_TARGET_FRONTEND"/
            rm -rf "$TEMP_DIR" "$TEMP_ARCHIVE"

            echo "Перезапуск voxly-frontend..."
            pm2 reload voxly-frontend || pm2 start http-server --name "voxly-frontend" -- "$DEPLOY_TARGET_FRONTEND" -p 8080
            
            # =========================================================
            # ЧАСТЬ 2: Развертывание БЭКЕНДА (Установка зависимостей и перезапуск)
            # =========================================================
            
            BACKEND_TARGET_DIR="/root/voxly-backend"
            echo "Завершение развертывания БЭКЕНДА в $BACKEND_TARGET_DIR..."

            # 8. Переходим в папку
            cd "$BACKEND_TARGET_DIR" || { echo "ОШИБКА: Не удалось перейти в $BACKEND_TARGET_DIR. Проверьте права доступа."; exit 1; }

            # 9. Установка зависимостей Node.js 
            echo "Установка зависимостей Node.js..."
            # Используем --production для установки только зависимостей для продакшена (если есть)
            npm install --omit=dev || { echo "ОШИБКА: Не удалось выполнить npm install."; exit 1; }
            
            # 10. Перезапускаем PM2-процесс бэкенда
            echo "Перезапуск voxly-backend..."
            pm2 reload voxly-backend || { echo "ОШИБКА: Не удалось перезапустить PM2 процесс 'voxly-backend'."; }
            
            # 11. Сохраняем состояние PM2
            echo "Сохранение состояния PM2..."
            pm2 save
