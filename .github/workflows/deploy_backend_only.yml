name: Backend CI/CD (Только бэкенд)

on:
  push:
    branches:
      - main
    paths:
      - 'voxly_backend/**'
      - '.github/workflows/deploy_backend_only.yml'

  workflow_dispatch:

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Проверка кода (Checkout)
        uses: actions/checkout@v4

      # --- ШАГ 2: Принудительная очистка целевой папки ---
      - name: 2. Принудительная очистка целевой папки на VPS
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            BACKEND_TARGET_DIR="/root/voxly-backend"
            echo "Очистка содержимого папки $BACKEND_TARGET_DIR перед копированием..."
            # Удаляем все внутри папки, но оставляем саму папку
            rm -rf "$BACKEND_TARGET_DIR"/*
            rm -rf "$BACKEND_TARGET_DIR"/.* || true

      # --- ШАГ 3. КОПИРОВАНИЕ ФАЙЛОВ НА VPS через SCP ---
      # ИЗМЕНЕНО: Копируем всю папку voxly_backend, а не ее содержимое.
      # На VPS это создаст структуру: /root/voxly-backend/voxly_backend/...
      - name: 3. Копирование файлов БЭКЕНДА на VPS (/root/voxly-backend)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./voxly_backend" # ИЗМЕНЕНО: Убрана маска /*
          target: "/root/voxly-backend"
          overwrite: true
          
      # --- ШАГ 4: УСТАНОВКА и ПЕРЕЗАПУСК БЭКЕНДА (SSH команды) ---
      - name: 4. Установка зависимостей и перезапуск на VPS
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          script: |
            BACKEND_TARGET_DIR="/root/voxly-backend"
            
            echo "Развертывание БЭКЕНДА в $BACKEND_TARGET_DIR..."
            
            # НОВЫЕ КОМАНДЫ: Перемещаем содержимое из вложенной папки на уровень выше
            echo "Перемещение файлов из вложенной папки..."
            # Копируем содержимое voxly_backend/* в текущую папку
            mv "$BACKEND_TARGET_DIR/voxly_backend/"* "$BACKEND_TARGET_DIR"
            # Перемещаем скрытые файлы (например, .env)
            mv "$BACKEND_TARGET_DIR/voxly_backend/".* "$BACKEND_TARGET_DIR" || true
            # Удаляем теперь пустую вложенную папку
            rm -rf "$BACKEND_TARGET_DIR/voxly_backend"


            echo "Аварийная очистка вложенных папок..."
            rm -rf "$BACKEND_TARGET_DIR/voxly_frontend"
            
            cd "$BACKEND_TARGET_DIR" || { echo "ОШИБКА: Не удалось перейти в $BACKEND_TARGET_DIR. Проверьте путь и права."; exit 1; }

            echo "Установка зависимостей Node.js..."
            npm install
            
            echo "Перезапуск voxly-backend с ENV..."
            
            ENV_ARGS="--env PORT=${{ secrets.PORT }} \
              --env REDIS_URL=${{ secrets.REDIS_URL }} \
              --env OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }} \
              --env LIVEKIT_URL=${{ secrets.LIVEKIT_URL }} \
              --env LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }} \
              --env LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}"
              
            pm2 reload voxly-backend --interpreter node -- start server.mjs $ENV_ARGS || { echo "ОШИБКА: Не удалось перезапустить PM2 процесс 'voxly-backend'."; }
            
            echo "Сохранение состояния PM2..."
            pm2 save
