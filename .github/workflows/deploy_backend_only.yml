name: Backend CI/CD (Только бэкенд)

on:
  push:
    branches:
      - main
    # Запускаем только при изменении файлов в папке voxly_backend
    paths:
      - 'voxly_backend/**'
      - '.github/workflows/deploy_backend_only.yml' # Запуск при изменении самого воркфлоу

  workflow_dispatch: # Возможность запустить вручную

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Проверка кода (Checkout)
        uses: actions/checkout@v4

      # --- ШАГ 2. КОПИРОВАНИЕ ФАЙЛОВ НА VPS через SCP ---
      - name: 2. Копирование файлов БЭКЕНДА на VPS (/root/voxly-backend)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Копируем содержимое папки voxly_backend, используя маску
          source: "./voxly_backend/*"
          # Целевая папка на VPS
          target: "/root/voxly-backend"
          # Рекурсивное копирование с синхронизацией
          overwrite: true
          
      # --- ШАГ 3: УСТАНОВКА и ПЕРЕЗАПУСК БЭКЕНДА (SSH команды) ---
      - name: 3. Установка зависимостей и перезапуск на VPS
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          # Команда, которая выполняется на вашем VPS
          script: |
            BACKEND_TARGET_DIR="/root/voxly-backend"
            
            echo "Развертывание БЭКЕНДА в $BACKEND_TARGET_DIR..."
            
            # 0. АВАРИЙНАЯ ОЧИСТКА: Удаляем нежелательные вложенные папки,
            # которые могли быть ошибочно скопированы с прошлого раза.
            echo "Аварийная очистка вложенных папок..."
            rm -rf "$BACKEND_TARGET_DIR/voxly_backend"
            rm -rf "$BACKEND_TARGET_DIR/voxly_frontend"
            
            # 1. Переходим в папку бэкенда
            cd "$BACKEND_TARGET_DIR" || { echo "ОШИБКА: Не удалось перейти в $BACKEND_TARGET_DIR. Проверьте путь и права."; exit 1; }

            # 2. Установка зависимостей Node.js
            echo "Установка зависимостей Node.js..."
            npm install
            
            # 3. Перезапускаем PM2-процесс бэкенда с передачей переменных окружения
            echo "Перезапуск voxly-backend с ENV..."
            
            # Строка передачи ENV-переменных PM2
            ENV_ARGS="--env PORT=${{ secrets.PORT }} \
              --env REDIS_URL=${{ secrets.REDIS_URL }} \
              --env OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }} \
              --env LIVEKIT_URL=${{ secrets.LIVEKIT_URL }} \
              --env LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }} \
              --env LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}"
              
            # Команда PM2, которая использует ENV_ARGS
            pm2 reload voxly-backend --interpreter node -- start server.mjs $ENV_ARGS || { echo "ОШИБКА: Не удалось перезапустить PM2 процесс 'voxly-backend'."; }
            
            # 4. Сохраняем состояние PM2
            echo "Сохранение состояния PM2..."
            pm2 save
