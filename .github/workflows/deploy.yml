name: Flutter Web CI/CD

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Проверка кода (Checkout)
        uses: actions/checkout@v4

      - name: 2. Настройка Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'beta'

      - name: 3. Получение зависимостей
        # Запускаем pub get в папке проекта Flutter
        run: flutter pub get
        working-directory: ./voxly_frontend

      - name: 4. Сборка Flutter Web
        # Папка build/web будет создана внутри voxly_frontend.
        run: flutter build web --release
        working-directory: ./voxly_frontend
          
      # --- НОВЫЙ ШАГ: ПУБЛИКАЦИЯ В ВЕТКУ GH-PAGES ---
      - name: 5. Публикация веб-сборки в ветку gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          # Убедитесь, что у вашего репозитория включено право записи (Permissions > Actions > General > Read and write permissions)
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Содержимое папки flutter_frontend/build/web будет помещено в корень gh-pages
          publish_dir: ./voxly_frontend/build/web 
          # Публикуем в ветку gh-pages
          publish_branch: gh-pages
          # Используем простое сообщение коммита
          commit_message: "Deploying Flutter Web build via CI/CD"
        
      # --- ОБНОВЛЕННЫЙ ШАГ: СКАЧИВАНИЕ ИЗ GH-PAGES НА VPS ---
      - name: 6. Развертывание на VPS Selectel (Скачивание с gh-pages)
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          
          # Команда, которая выполняется на вашем VPS
          script: |
            # 1. Определяем переменные
            REPO_NAME="${{ github.repository }}"
            DEPLOY_TARGET_DIR="/var/www/voxly_frontend"
            TEMP_ARCHIVE="/tmp/gh-pages-build.zip"
            TEMP_DIR="/tmp/gh-pages-content"
            
            # URL для скачивания ZIP-архива ветки gh-pages
            # Формат: https://api.github.com/repos/{owner}/{repo}/zipball/{branch}
            DOWNLOAD_URL="https://api.github.com/repos/$REPO_NAME/zipball/gh-pages"

            echo "Скачивание артефакта из $DOWNLOAD_URL"

            # 2. Скачиваем ZIP-архив с GitHub API (требует установленного wget на VPS)
            # Необходимо установить wget и unzip на VPS
            wget -q -O "$TEMP_ARCHIVE" "$DOWNLOAD_URL"
            
            # 3. Распаковываем архив во временную папку
            mkdir -p "$TEMP_DIR"
            unzip -q -o "$TEMP_ARCHIVE" -d "$TEMP_DIR"
            
            # 4. Находим корневую папку с файлами внутри архива (она имеет случайное имя)
            # Ищем папку, которая не является системной (. или ..)
            BUILD_FOLDER=$(find "$TEMP_DIR" -mindepth 1 -maxdepth 1 -type d | head -n 1)
            
            # 5. Очищаем целевую папку на VPS
            mkdir -p "$DEPLOY_TARGET_DIR"
            find "$DEPLOY_TARGET_DIR" -mindepth 1 -delete
            
            # 6. Копируем файлы из временной папки в целевую
            # Копируем СОДЕРЖИМОЕ $BUILD_FOLDER в $DEPLOY_TARGET_DIR
            cp -r "$BUILD_FOLDER"/* "$DEPLOY_TARGET_DIR"/

            # 7. Уборка
            rm -rf "$TEMP_DIR" "$TEMP_ARCHIVE"

            # 8. Перезапускаем HTTP-сервер 
            echo "Restarting http-server..."
            pm2 reload voxly-frontend || pm2 start http-server --name "voxly-frontend" -- "$DEPLOY_TARGET_DIR" -p 8080
            
            # 9. Сохраняем состояние PM2 
            pm2 save
